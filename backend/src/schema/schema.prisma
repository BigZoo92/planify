datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider                 = "zod-prisma-types"
    output                   = "../../../schema/"
    createModelTypes         = true
    writeBarrelFiles         = false
    createInputTypes         = false
    addInputTypeValidation   = false
    addIncludeType           = false
    addSelectType            = false
    validateWhereUniqueInput = false
    useDefaultValidators     = false
    coerceDate               = false
}

model User {
    id               Int          @id @default(autoincrement())
    email            String       @unique
    password         String?
    firstName        String?
    lastName         String?
    urls             String[]     @default([])
    createdAt        DateTime     @default(now())
    updatedAt        DateTime     @updatedAt
    agendas          AgendaUser[]
    messagesSent     Message[]    @relation("MessageSender")
    messagesReceived Message[]    @relation("MessageReceiver")
}

model Agenda {
    id        Int           @id @default(autoincrement())
    type      String
    users     AgendaUser[]
    events    EventAgenda[]
    active    Boolean       @default(true)
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
}

model AgendaUser {
    agenda    Agenda   @relation(fields: [agendaId], references: [id])
    agendaId  Int
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    role      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([agendaId, userId])
}

model Event {
    id        Int           @id @default(autoincrement())
    summary   String
    location  String
    start     DateTime
    end       DateTime
    data      Json
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
    agendas   EventAgenda[]
}

model EventAgenda {
    event     Event    @relation(fields: [eventId], references: [id])
    eventId   Int
    agenda    Agenda   @relation(fields: [agendaId], references: [id])
    agendaId  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([eventId, agendaId])
}

model Message {
    id         Int      @id @default(autoincrement())
    content    String
    senderId   Int
    receiverId Int
    sender     User     @relation("MessageSender", fields: [senderId], references: [id])
    receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id])
    createdAt  DateTime @default(now())
}
